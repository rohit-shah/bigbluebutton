<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:Button xmlns:mx="http://www.adobe.com/2006/mxml" styleName="webcamDefaultButtonStyle" 
		   xmlns:mate="http://mate.asfusion.com/"
		   click="openPublishWindow()" creationComplete="init()" 
		   mouseOver = "mouseOverHandler(event)"
		   mouseOut = "mouseOutHandler(event)"
           height="24" width="24"
		   toolTip="{this.selected ? ResourceUtil.getInstance().getString('bbb.toolbar.video.toolTip.stop') : ResourceUtil.getInstance().getString('bbb.toolbar.video.toolTip.start')}"
		   visible="false"
		   implements="org.bigbluebutton.common.IBbbToolbarComponent">

	<mate:Listener type="{ShortcutEvent.SHARE_WEBCAM}" method="remoteClick" />
	<mate:Listener type="{BBBEvent.CAM_SETTINGS_CLOSED}" method="handleCamSettingsClosedEvent"/>
	<mate:Listener type="{ShareCameraRequestEvent.SHARE_CAMERA_REQUEST}" receive="enabled=false" />
	<mate:Listener type="{LockControlEvent.CHANGED_LOCK_SETTINGS}" method="lockSettingsChanged" />
	
	<mx:Script>
		<![CDATA[
      import com.asfusion.mate.events.Dispatcher;
      
      import org.bigbluebutton.common.Images;
      import org.bigbluebutton.core.UsersUtil;
      import org.bigbluebutton.core.events.LockControlEvent;
      import org.bigbluebutton.core.managers.UserManager;
      import org.bigbluebutton.main.events.BBBEvent;
      import org.bigbluebutton.main.events.ShortcutEvent;
      import org.bigbluebutton.main.model.users.BBBUser;
      import org.bigbluebutton.main.model.users.Conference;
      import org.bigbluebutton.main.views.MainToolbar;
      import org.bigbluebutton.modules.videoconf.events.ClosePublishWindowEvent;
      import org.bigbluebutton.modules.videoconf.events.ShareCameraRequestEvent;
      import org.bigbluebutton.util.i18n.ResourceUtil;
			

			public const OFF_STATE:Number = 0;
			public const ON_STATE:Number = 1;
			
			public const STOP_PUBLISHING:Number = 0;
			public const START_PUBLISHING:Number = 1;
						
			private var _currentState:Number = OFF_STATE;

			
			private var dispatcher:Dispatcher;
			private var _this:Button ;
			
			public function lockSettingsChanged(e:*):void{
				var userManager:UserManager = UserManager.getInstance();
				var conference:Conference = userManager.getConference();
				var me:BBBUser = conference.getMyUser();
				
				_this.visible = !me.disableMyCam;
				_this.includeInLayout = !me.disableMyCam;
			}
			
			private function init():void{
				_this = this;
				dispatcher = new Dispatcher();
				this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.video.toolTip.start');
				this.styleName = "webcamDefaultButtonStyle";
				this.enabled = true;
				this.selected = false;
				_currentState = OFF_STATE;
				lockSettingsChanged(null);
			}
			
			public function remoteClick(e:ShortcutEvent):void{
				openPublishWindow();
				dispatchEvent(new ShortcutEvent(ShortcutEvent.REMOTE_FOCUS_WEBCAM));
			}
			
			public function publishingStatus(status:Number):void {
				if(status == START_PUBLISHING) {
					_currentState = ON_STATE;
					//this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.video.toolTip.stop');
          this.styleName = "webcamOnButtonStyle";
					this.enabled = true;
					this.selected = true;
				}
				else {
					_currentState = OFF_STATE;
          this.styleName = "webcamDefaultButtonStyle";
					this.enabled = true;
					this.selected = false;
				}
			}

			public function set isPresenter (presenter:Boolean):void{
				//Nothing
			}

			private function openPublishWindow():void{
				if(_currentState == ON_STATE) {
					trace("Close window");
					_currentState = OFF_STATE;
          this.styleName = "webcamDefaultButtonStyle";
					this.selected = false;
					dispatchEvent(new ClosePublishWindowEvent());				
				} else {
					trace("Share camera");
					_currentState = ON_STATE;
          this.styleName = "webcamOnButtonStyle";
					this.selected = true;
					dispatchEvent(new ShareCameraRequestEvent());
				}			
			}
			
			private function handleCamSettingsClosedEvent(e:BBBEvent):void {
				this.setFocus();
				if(e.payload['clicked'] == "cancel"){
					this.enabled = true;
					this.selected = false;
					_currentState = OFF_STATE;
          this.styleName = "webcamDefaultButtonStyle";
				}
			}

			private function mouseOverHandler(event:MouseEvent):void {
				if(_currentState == ON_STATE)
        this.styleName = "webcamOffButtonStyle";
				else	
          this.styleName = "webcamOnButtonStyle";
			}

			private function mouseOutHandler(event:MouseEvent):void {
				if(_currentState == ON_STATE)
        this.styleName = "webcamOnButtonStyle";
				else	
          this.styleName = "webcamDefaultButtonStyle";
			}


			public function getAlignment():String{
				return MainToolbar.ALIGN_LEFT;
			}
			
			public function theory():String{
				return "Webcam button";
			}
		]]>
	</mx:Script>
</mx:Button>
